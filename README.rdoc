= Robot Remote Server for the Robot Framework in Ruby

This is a Ruby gem for the Ruby implementation of RobotRemoteServer that comes with Robot Framework.

This gem is compatible with Robot Framework versions 2.1 and later. For earlier versions, you will need to include the Remote Library explicitly, but it should be compatible in that scenario as well.

== Overview

Per its official documentation, "Robot Framework is a generic keyword-driven test automation framework." Natively, it supports testing libraries in Python and Java. However, Robot Framework also provides a "Remote Library" which allows for two things (again, per the official documentation):

* It is possible to have test libraries running on different machines than where Robot Framework itself is executed. This allows interesting possibilities for distributed testing.
* Test libraries can be implemented using any language that supports XML-RPC protocol. Robot Framework currently contains generic remote servers for Python/Jython and Ruby, and the plan is to implement generic servers for other languages like Java and Perl in the future.

== Installation

The simplest method of installation is to install the gem directly from Rubygems.org:

    gem install robot_remote_server


If you want to hack on the remote server directly and then build your own gem, you can do so with the <tt>gem</tt> command:

    gem build robot_remote_server
    gem install robot_remote_server-{version}.gem

Or by installing this project's dependencies and using the following rake tasks:

    rake build
    rake install

== Usage

For information on the Remote Library interface in Robot Framework, read the following from the official Robot Framework wiki: http://code.google.com/p/robotframework/wiki/RemoteLibrary

This gem provides a remote server implemented in Ruby, which allows you to write your own testing library (i.e. your own keywords) using Ruby and Ruby libraries.

In your test library, you need to include the gem:

    require 'robot_remote_server'

Then you'll have the RobotRemoteServer class available to your code. For example, if your test library was defined in a class called <tt>ExampleTestLibrary</tt>, here's how you'd start the <tt>robot_remote_server</tt> server and feed it your test library from IRB:

    require 'robot_remote_server'
    RobotRemoteServer.new(ExampleTestLibrary.new)

Per the example in Robot Framework itself, you could include that in a file as follows:

    if __FILE__ == $0
      require 'robot_remote_server'
      RobotRemoteServer.new(ExampleTestLibrary.new, *ARGV)
    end

Once you have the remote server running with your new test library, you can run your Robot Framework tests and have your test library's keywords available per usual.
